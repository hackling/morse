#!/usr/bin/env ruby
require 'open-uri'
require 'json'

VALID_ARGS = { run_examples: '--run', file_output: '--files' }

def main
  ARGV.freeze
  validate_args

  if api_token.empty?
    output_error 'no semaphore token found'
    exit_with_failure
  end

  @git_branch = git_current_branch #check current git branch

  if !@git_branch.empty?
    if project_id.nil?
      output_error 'unable to locate project on semaphore'
      exit_with_failure
    end
    if branch_id.nil?
      output_error 'unable to locate branch on semaphore'
      exit_with_failure
    end

    examples = failed_examples
    if examples.empty?
      $stdout.puts 'All Rspec tests passed'
    elsif examples == 'pending'
      $stdout.puts 'Branch is currently building'
    else
      if file_output?
        puts output_without_line_numbers(examples)
      else
        puts examples.join("\n")
      end
      run_examples(examples) if run_examples?
    end
  else
    output_error 'no git branch detected'
    exit_with_failure
  end
end

def git_current_project
  `git remote -v`.lines.grep(/^origin\s/).first.scan(%r[github.com:([^/]+)/([^/]+)\.git]).first
end

def git_current_branch
  %x(
    BRANCH="$(git symbolic-ref -q HEAD)"
    BRANCH="${BRANCH##refs/heads/}"
    BRANCH="${BRANCH:-HEAD}"
    echo "$BRANCH"
  ).strip
end

def semaphore_project_url(*args)
  "https://semaphoreapp.com/api/v1/projects/#{project_id}/#{args.map(&:to_s).join('/')}?auth_token=#{api_token}"
end

def branch_id
  @branch_id||= begin
    @file = File.join(Dir.pwd, '.git/.morse')
    if File.exists?(@file)
      begin
        File.read(@file).lines.grep(/^#{@git_branch}:/).first[/^#{@git_branch}: (.+)/, 1]
      rescue
        find_and_cache_branch
      end
    else
      find_and_cache_branch
    end
  end
end

def find_and_cache_branch
  branch_information = JSON.parse(open(semaphore_project_url(:branches)).read)
  branch_id = (branch_information.detect(-> { {} }) { |branch| branch['name'] == @git_branch })['id']
  if !branch_id.to_s.empty?
    File.open(@file, 'a') { |file| file.write("\n#{@git_branch}: #{branch_id}") }
    branch_id
  else
    return nil
  end
end

def failed_examples
  examples = []
  branch_status = JSON.parse(open(semaphore_project_url(branch_id, :status)).read)
  if branch_status['result'] == 'pending'
    return 'pending'
  end
  unless branch_status['result'] == 'passed'
    log = JSON.parse(open(branch_status['build_log_url']).read)
    failing_threads_commands = []
    log['threads'].each do |thread|
      failing_threads_commands += thread['commands'].select { |command| command['result'] != '0' }
    end
    failing_threads_commands.each do |thread_commands|
      examples += thread_commands['output'].scan(/rspec (.*?)<\/span/).flatten
    end
  end
  examples
end

def output_without_line_numbers(examples)
  examples.map { |example| example[/^(.*?\.rb)/, 1] }.uniq
end

def run_examples(examples)
  files = if @no_line_numbers
    output_without_line_numbers(examples)
  else
    examples
  end
  puts "bundle exec rspec #{files.join(' ')}"
  system("bundle exec rspec #{files.join(' ')}")
end

def api_token # api_token
  @api_token ||= File.read(File.expand_path('~/.semaphore.token'))
end

def project_id # project_id
  @project_id ||= begin
    @file = File.join(Dir.pwd, '.git/.morse')
    if File.exists?(@file)
      File.read(@file).lines.grep(/^project:/).first[/^project: (.+)/, 1]
    else
      find_and_cache_project
    end
  end
end

def find_and_cache_project
  project_details = git_current_project
  url = "https://semaphoreapp.com/api/v1/projects?auth_token=#{api_token}"
  project_info = JSON.parse open(url).read
  project_id = (project_info.detect { |pi| pi['name'] == project_details[1] && pi['owner'] == project_details[0] })['hash_id']
  if !project_id.empty?
    File.open(@file, 'a') { |file| file.write("project: #{project_id}") }
    project_id
  else
    return nil
  end
end

def validate_args
  fail ArgumentError unless (ARGV - VALID_ARGS.values).empty?
rescue ArgumentError
  ARGV.each do |arg|
    output_error("invalid argument '#{arg}'") unless VALID_ARGS.values.include? arg
  end

  exit_with_failure
end

def run_examples?
  arg_present? :run_examples
end

def file_output?
  arg_present? :file_output
end

def arg_present?(arg)
  !(Array(VALID_ARGS[arg.to_sym]) & ARGV).empty? if arg.respond_to? :to_sym
end

def output_error(message)
  $stderr.puts "\e[31mError:\e[0m #{message}" if message.respond_to? :to_s
end

def exit_with_failure
  exit false
end

main
